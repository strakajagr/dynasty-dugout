import React, { useState, useEffect } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { Crown, Users, Mail, Clock, AlertCircle, CheckCircle, Shield, ArrowRight, User, Lock, Eye, EyeOff, ArrowLeft, RotateCcw } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

const JoinLeague = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { user, signIn } = useAuth();
  
  // State management for invitation flow
  const [invitation, setInvitation] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [step, setStep] = useState('verification');
  
  // Form states
  const [signupData, setSignupData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    favoriteTeam: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [verificationCode, setVerificationCode] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Get token from URL
  const token = searchParams.get('token');

  // MLB Teams for dropdown
  const mlbTeams = [
    'Arizona Diamondbacks', 'Atlanta Braves', 'Baltimore Orioles', 'Boston Red Sox',
    'Chicago Cubs', 'Chicago White Sox', 'Cincinnati Reds', 'Cleveland Guardians',
    'Colorado Rockies', 'Detroit Tigers', 'Houston Astros', 'Kansas City Royals',
    'Los Angeles Angels', 'Los Angeles Dodgers', 'Miami Marlins', 'Milwaukee Brewers',
    'Minnesota Twins', 'New York Mets', 'New York Yankees', 'Oakland Athletics',
    'Philadelphia Phillies', 'Pittsburgh Pirates', 'San Diego Padres', 'San Francisco Giants',
    'Seattle Mariners', 'St. Louis Cardinals', 'Tampa Bay Rays', 'Texas Rangers',
    'Toronto Blue Jays', 'Washington Nationals'
  ];

  // Verify invitation token on component mount
  useEffect(() => {
    const verifyInvitation = async () => {
      if (!token) {
        setError('Invalid invitation link. Please check your email and try again.');
        setLoading(false);
        return;
      }

      try {
        const response = await fetch(`/api/invitation/verify?token=${encodeURIComponent(token)}`);
        const data = await response.json();

        if (data.success) {
          setInvitation(data.invitation);
          
          if (user) {
            setStep('authenticated');
          } else {
            if (data.invitation?.email) {
              setSignupData(prev => ({ ...prev, email: data.invitation.email }));
            }
            setStep('signup');
          }
        } else {
          setError(data.message || 'Invalid or expired invitation.');
        }
      } catch (err) {
        console.error('Invitation verification error:', err);
        setError('Failed to verify invitation. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    verifyInvitation();
  }, [token]);

  // Separate effect to handle user authentication changes
  useEffect(() => {
    if (user && invitation && step !== 'authenticated') {
      setStep('authenticated');
    }
  }, [user, invitation, step]);

  // Handle signup form submission
  const handleSignup = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');

    try {
      const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(signupData)
      });

      const data = await response.json();

      if (data.success) {
        setSuccess('Account created! Please check your email for a verification code.');
        setStep('email_verification');
      } else {
        setError(data.message || 'Account creation failed. Please try again.');
      }
    } catch (err) {
      console.error('Signup error:', err);
      setError('Account creation failed. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle email verification
  const handleEmailVerification = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');

    try {
      const response = await fetch('/api/auth/verify-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: signupData.email,
          code: verificationCode
        })
      });

      const data = await response.json();

      if (data.success) {
        setSuccess('Email verified! Signing you in and preparing to join league...');
        
        try {
          const loginResponse = await fetch('/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              email: signupData.email,
              password: signupData.password
            })
          });

          const loginData = await loginResponse.json();
          
          if (loginData.success) {
            await signIn(signupData.email, signupData.password);
            setSuccess('Successfully signed in! Now you can join the league.');
          } else {
            setError('Verification successful, but auto-login failed. Please login manually to continue joining the league.');
          }
        } catch (loginErr) {
          console.error('Auto-login error:', loginErr);
          setError('Verification successful, but auto-login failed. Please login manually to continue joining the league.');
        }
      } else {
        setError(data.message || 'Email verification failed. Please check your code and try again.');
      }
    } catch (err) {
      console.error('Email verification error:', err);
      setError('Email verification failed. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Resend verification email
  const handleResendVerification = async () => {
    setIsSubmitting(true);
    setError('');

    try {
      const response = await fetch('/api/auth/resend-verification', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: signupData.email })
      });

      const data = await response.json();
      
      if (data.success) {
        setSuccess('Verification email resent! Please check your inbox.');
      } else {
        setError(data.message || 'Failed to resend verification email.');
      }
    } catch (err) {
      console.error('Resend verification error:', err);
      setError('Failed to resend verification email.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle invitation acceptance
  const handleAcceptInvitation = async () => {
    setIsSubmitting(true);
    setError('');

    try {
      const response = await fetch('/api/invitation/accept', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token })
      });

      const data = await response.json();

      if (data.success) {
        setSuccess('Successfully joined the league!');
        setTimeout(() => {
          navigate(`/leagues/${invitation.league_id}`);
        }, 2000);
      } else {
        setError(data.message || 'Failed to join league. Please try again.');
      }
    } catch (err) {
      console.error('Accept invitation error:', err);
      setError('Failed to join league. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setSignupData(prev => ({ ...prev, [name]: value }));
  };

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="bg-gray-800 rounded-lg p-8 max-w-md w-full">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-500 mx-auto"></div>
            <p className="text-gray-400 mt-4">Verifying invitation...</p>
          </div>
        </div>
      </div>
    );
  }

  // Error state (invalid/expired invitation)
  if (error && !invitation) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="bg-gray-800 rounded-lg p-8 max-w-md w-full text-center">
          <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-white mb-2">Invalid Invitation</h2>
          <p className="text-gray-400 mb-6">{error}</p>
          <button
            onClick={() => navigate('/')}
            className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg"
          >
            Return Home
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4">
      <div className="bg-gray-800 rounded-lg p-8 max-w-2xl w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <Crown className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
          <h1 className="text-3xl font-bold text-white">Dynasty Dugout</h1>
        </div>

        {/* Invitation Details */}
        {invitation && (
          <div className="bg-gray-700 rounded-lg p-6 mb-6">
            <h2 className="text-xl font-semibold text-white mb-4">League Invitation</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="flex items-center">
                <Mail className="h-5 w-5 text-yellow-500 mr-2" />
                <div>
                  <p className="text-gray-400 text-sm">Invited By</p>
                  <p className="text-white">{invitation.invited_by_name}</p>
                </div>
              </div>
              <div className="flex items-center">
                <Clock className="h-5 w-5 text-orange-500 mr-2" />
                <div>
                  <p className="text-gray-400 text-sm">Expires</p>
                  <p className="text-white">
                    {new Date(invitation.expires_at).toLocaleDateString()} at {new Date(invitation.expires_at).toLocaleTimeString()}
                  </p>
                </div>
              </div>
            </div>
            {invitation.personal_message && (
              <div className="mt-4 p-4 bg-gray-600 rounded-lg">
                <p className="text-gray-400 text-sm">Personal Message</p>
                <p className="text-white">{invitation.personal_message}</p>
              </div>
            )}
          </div>
        )}

        {/* Error/Success Messages */}
        {error && (
          <div className="bg-red-500/20 border border-red-500 rounded-lg p-4 mb-6 flex items-center">
            <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
            <span className="text-red-100">{error}</span>
          </div>
        )}

        {success && (
          <div className="bg-green-500/20 border border-green-500 rounded-lg p-4 mb-6 flex items-center">
            <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
            <span className="text-green-100">{success}</span>
          </div>
        )}

        {/* Step Content */}
        {step === 'signup' && (
          <div>
            <h2 className="text-2xl font-semibold text-white mb-2">
              You're invited to join {invitation?.league_name}!
            </h2>
            <p className="text-gray-400 mb-6">Create an account to join this league:</p>

            <form onSubmit={handleSignup} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-1">
                    First Name *
                  </label>
                  <input
                    type="text"
                    name="firstName"
                    value={signupData.firstName}
                    onChange={handleInputChange}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-yellow-500 focus:outline-none"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-1">
                    Last Name *
                  </label>
                  <input
                    type="text"
                    name="lastName"
                    value={signupData.lastName}
                    onChange={handleInputChange}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-yellow-500 focus:outline-none"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">
                  Email Address *
                </label>
                <input
                  type="email"
                  name="email"
                  value={signupData.email}
                  onChange={handleInputChange}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-yellow-500 focus:outline-none"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">
                  Password *
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    name="password"
                    value={signupData.password}
                    onChange={handleInputChange}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 pr-10 text-white focus:border-yellow-500 focus:outline-none"
                    required
                    minLength={8}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
                <p className="text-sm text-gray-400 mt-1">
                  Must be at least 8 characters with uppercase, lowercase, and numbers
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">
                  Favorite Team
                </label>
                <select
                  name="favoriteTeam"
                  value={signupData.favoriteTeam}
                  onChange={handleInputChange}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-yellow-500 focus:outline-none"
                >
                  <option value="">Select a team...</option>
                  {mlbTeams.map(team => (
                    <option key={team} value={team}>{team}</option>
                  ))}
                </select>
              </div>

              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-3 px-6 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-2"></div>
                    Creating Account...
                  </>
                ) : (
                  <>
                    <User className="h-5 w-5 mr-2" />
                    Create Account
                  </>
                )}
              </button>
            </form>
          </div>
        )}

        {step === 'email_verification' && (
          <div>
            <div className="text-center mb-6">
              <Mail className="h-16 w-16 text-yellow-500 mx-auto mb-4" />
              <h2 className="text-2xl font-semibold text-white mb-2">Check Your Email</h2>
              <p className="text-gray-400">
                We've sent a verification code to <strong>{signupData.email}</strong>
              </p>
            </div>

            <form onSubmit={handleEmailVerification} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">
                  Verification Code *
                </label>
                <input
                  type="text"
                  value={verificationCode}
                  onChange={(e) => setVerificationCode(e.target.value)}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-yellow-500 focus:outline-none"
                  placeholder="Enter 6-digit code"
                  required
                  maxLength={6}
                />
              </div>

              <div className="flex gap-4">
                <button
                  type="button"
                  onClick={() => setStep('signup')}
                  className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-3 px-6 rounded-lg flex items-center justify-center"
                >
                  <ArrowLeft className="h-5 w-5 mr-2" />
                  Back
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="flex-1 bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-3 px-6 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-2"></div>
                      Verifying...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="h-5 w-5 mr-2" />
                      Verify Email
                    </>
                  )}
                </button>
              </div>
            </form>

            <div className="text-center mt-6">
              <button
                onClick={handleResendVerification}
                disabled={isSubmitting}
                className="text-gray-400 hover:text-white text-sm flex items-center justify-center mx-auto"
              >
                <RotateCcw className="h-4 w-4 mr-1" />
                Resend Code
              </button>
            </div>
          </div>
        )}

        {step === 'authenticated' && (
          <div>
            <div className="text-center mb-6">
              <Shield className="h-16 w-16 text-green-500 mx-auto mb-4" />
              <h2 className="text-2xl font-semibold text-white mb-2">Ready to Join!</h2>
              <p className="text-gray-400">
                Welcome {user?.given_name || 'back'}! You're all set to join {invitation?.league_name}.
              </p>
            </div>

            <div className="text-center mb-6">
              <div className="inline-flex items-center bg-green-500/20 border border-green-500 rounded-lg px-4 py-2 mb-4">
                <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                <span className="text-green-100 font-medium">Secure Invitation</span>
              </div>
              <p className="text-gray-400 text-sm">
                This invitation link is secure and will be permanently consumed once you join.
              </p>
            </div>

            <button
              onClick={handleAcceptInvitation}
              disabled={isSubmitting}
              className="w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-3 px-6 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-2"></div>
                  Joining League...
                </>
              ) : (
                <>
                  <Users className="h-5 w-5 mr-2" />
                  Join {invitation?.league_name}
                  <ArrowRight className="h-5 w-5 ml-2" />
                </>
              )}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default JoinLeague;
